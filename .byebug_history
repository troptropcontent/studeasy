c
@assessment.save
exit
@assessment.errors
@assessment.save.errors
@assessment.save
@assessment
exit
params.require(:solution).permit(:documents)
params
solution_params
c
exit
params
parals
exit
 self.class.where(id: id).with_status.first.attributes
 self.class.where(id: id).with_status.first
exit
self.class.paid
self.class.where(id: id).with_status.first
exit
STATUS_QUERY
exit
self.class.waiting_for_quotation.find_by id: id
self.class.waiting_for_quotation.find id
self.class
self
class.waiting_for_quotation
klass.waiting_for_quotation
exit
self.klass
class
self
c
@tab
c
@tab
exit
require 'awesome_print'
ap @assessments
c
Order.find_by(checkout_session_id: event.data.object.id)
exit
Order.last
order = Order.find_by(checkout_session_id: event.data.object.id)
c
@session.id
session
@session
c
    )c
      cancel_url: assessment_url(@order.quote.assessment)
      success_url: assessment_url(@order.quote.assessment),
      }],
        quantity: 1
        currency: 'eur',
        amount: quote.price_cents,
        name: quote.assessment.name,
      line_items: [{
      payment_method_types: ['card'],
    )@session = Stripe::Checkout::Session.create(
      cancel_url: assessment_url(@order.quote.assessment)
      success_url: assessment_url(@order.quote.assessment),
      }],
        quantity: 1
        currency: 'eur',
        amount: quote.price_cents,
        name: quote.assessment.name,
      line_items: [{
      payment_method_types: ['card'],
@session = Stripe::Checkout::Session.create(
    )
      cancel_url: assessment_url(@order.quote.assessment)
      success_url: assessment_url(@order.quote.assessment),
      }],
        quantity: 1
        currency: 'eur',
        amount: quote.price_cents,
        name: quote.assessment.name,
      line_items: [{
      payment_method_types: ['card'],
@session = Stripe::Checkout::Session.create(
c
puts event.data
require "awesome_print"
require 'awesome_print'
require awesome_print
ap event.data
event.data
Order.last
event.data.object.id
order = Order.find_by(checkout_session_id: event.data.object.id)
exit
order = Order.create!(quote: quote, amount: quote.price)
order.delete
 order = Order.create!(quote: quote, amount: quote.price_cents)
quote = Quote.find(order_params[:quote_id])
exit
params.require(:assessment).permit(attached_documents_attributes: [])exit
params.require(:assessment).permit(attached_documents_attributes: [])
params.require(:assessment).permit(attached_documents_attributes: []).compact_blank.each {|e| print "HHHHHHHHHH #{e}"}
params.require(:assessment).permit(attached_documents_attributes: []).compact_blank.each {|e| puts "HHHHHHHHHH #{e}"}
params.require(:assessment).permit(attached_documents_attributes: []).compact_blank.each {|e| puts e}
params.require(:assessment).permit(attached_documents_attributes: []).compact.each {|e| puts e}
params.require(:assessment).permit(attached_documents_attributes: []).each {|e| puts e}
params.require(:assessment).permit(attached_documents_attributes: [])
exit
params.require(:assessment).permit(attached_documents_attributes: [files: []])
params.require(:assessment).permit(attached_documents_attributes: [files: []]).permit(:attached_documents_attributes)
params.require(:assessment).permit(attached_documents_attributes: [files: []])
params.require(:assessment).permit(attached_documents_attributes: [files: []])[:files]
params.require(:assessment).permit(attached_documents_attributes: [files: []])
params.require(:assessment).permit(attached_documents_attributes: [files: []]).permit(files: [])
params.require(:assessment).permit(attached_documents_attributes: [files: []]).permit(:files)
params.require(:assessment).permit(attached_documents_attributes: [files: []])
params.require(:assessment).permit(:name, attached_documents_attributes: [files: []])
params.require(:assessment).permit(:name, attached_documents_attributes: [:files])
params.require(:assessment).permit(:name, attached_documents_attributes: [])
params.require(:assessment).permit(:name)
params.require(:assessment)
params.permit(attached_documents_attributes: [])
params.permit(:attached_documents_attributes).to_h
params.permit(:attached_documents_attributes).to_has
params.permit(:attached_documents_attributes).keys
params.permit(:attached_documents_attributes)
params
param
exit
params.require(:assessment).permit(:attached_documents_attributes)
params.require(:assessment).permit(attached_documents_attributes: [:files])
params.require(:assessment)
exit
pets_attributes
params.require(:assessment)
params.require(:assessment).permit(attached_documents_attributes: [:files])
params.require(:assessment).permit(attached_documents_attributes: [:file])
params.require(:assessment).permit(attached_documents_attributes: [])
params.require(:assessment).permit(attached_document_attributes: [])
exit
params.require(:assessment).permit(attached_document_attributes: [])
exit
params.require(:assessment)
params.require(:assessment).permit(attached_document_attributes: [])
params.require(:assessment).permit(:attached_document_attributes)
params.require(:assessment)
params["assessment"]["attached_document_attributes"]["files"].count
params["assessment"]["attached_document_attributes"]["files"]
params["assessment"]["attached_document_attributes"]
params["attached_document_attributes"]
params[:attached_document_attributes]
params
exit
params
exit
params
exit
@assessmentsexit
@assessments
exit
tab_params
exit
@assessment
exit
attributes
exit
@quote
quote_params.merge(status_params)
 quote_params.rge(status_params)
@quote
c
quote_params.merge(status_params)
exit
@quote
exit
@assessment
@quote
exit
y
q
params.require(:quote).permit(:price)
params.require(:quote)
params.r:quote).permit(:price)
params.require(:quote).permit(:pric
params
exit
super
exit
super
exit
user
user.admin?
